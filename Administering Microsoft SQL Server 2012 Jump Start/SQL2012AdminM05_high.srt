1
00:00:00,333 --> 00:00:06,333
[Music]

2
00:00:17,483 --> 00:00:21,466
Welcome back to the administering SQL Server 2012

3
00:00:21,483 --> 00:00:26,466
Jump Start. I'm Rich Currey. This is Mr. George Squillaci.

4
00:00:27,483 --> 00:00:29,466
We have the geeks in the background that are helping us out.

5
00:00:29,483 --> 00:00:35,466
Thanks to the geeks. Yeah, without them, you would not be seeing

6
00:00:35,483 --> 00:00:39,233
this, so absolutely, absolutely thanks to the guys behind the camera.

7
00:00:39,316 --> 00:00:39,466
>> All right.

8
00:00:39,483 --> 00:00:41,466
>> George, what have we got coming up now?

9
00:00:41,483 --> 00:00:45,466
>> So look, Rich, we're four modules down already, kind of unbelievable,

10
00:00:45,483 --> 00:00:49,350
but this module, again, a very important module. Something that

11
00:00:49,433 --> 00:00:52,466
you just have to get right. Remember, it's your fault.

12
00:00:52,483 --> 00:00:55,466
>> It always is my fault. Just ask Alise. She'll tell you.

13
00:00:55,483 --> 00:00:59,466
>> So implementing security. A bunch of topics to look at.

14
00:00:59,483 --> 00:01:04,383
And going to the overview, we have onion

15
00:01:05,483 --> 00:01:09,466
layers, I suppose we could describe, onion layers of security

16
00:01:09,483 --> 00:01:12,466
that we can set in SQL Server and we want to take a look at each

17
00:01:12,483 --> 00:01:15,233
one of those layers. Okay. I'll use the proper term.

18
00:01:15,316 --> 00:01:20,466
Scopes of security. We have server-level scope, database-level scope.

19
00:01:20,166 --> 00:01:25,433
We want to investigate the levels of security that we have, server

20
00:01:25,483 --> 00:01:28,466
level, database level, and then some strategies that we'll use

21
00:01:28,483 --> 00:01:30,433
for implementing permissions.

22
00:01:30,450 --> 00:01:30,466
>> All right.

23
00:01:30,483 --> 00:01:34,466
>> That's the big picture for this particular module.

24
00:01:34,483 --> 00:01:37,466
>> So let's start up at the top. What do you think?

25
00:01:37,483 --> 00:01:41,466
>> Sure. So in this particular topic, we'll look at in general

26
00:01:41,483 --> 00:01:45,466
the security scopes, list them by name, give you a picture to

27
00:01:45,233 --> 00:01:48,466
have in mind that will help you put your mind around what the

28
00:01:48,483 --> 00:01:52,466
available scopes are, and then we'll look at some other things,

29
00:01:52,483 --> 00:01:57,233
authentication, authentication modes and allowing someone to

30
00:01:57,316 --> 00:02:01,166
access the SQL Server instance. Then we'll take a look at some

31
00:02:01,483 --> 00:02:05,466
administrative activities at the instance. So that's coming up.

32
00:02:05,483 --> 00:02:06,250
>> All right.

33
00:02:06,333 --> 00:02:07,466
>> Big picture.

34
00:02:08,166 --> 00:02:13,183
The point of the diagram is to show that there are security options

35
00:02:13,266 --> 00:02:16,466
or there is security that can be applied at several different

36
00:02:16,483 --> 00:02:20,466
scopes up at the instance, and you see some example objects that

37
00:02:20,483 --> 00:02:23,466
can be controlled that are instance-level objects.

38
00:02:24,166 --> 00:02:29,433
Then we have database scope objects, schema scope within a database,

39
00:02:29,483 --> 00:02:34,466
and ultimately and most granular, we have individual objects

40
00:02:34,483 --> 00:02:36,466
within a database that can be controlled.

41
00:02:36,483 --> 00:02:40,466
>> So could you talk about scope as kind of like a container,

42
00:02:40,233 --> 00:02:44,466
so like the database scope is inside the server scope and the

43
00:02:45,483 --> 00:02:47,466
schema scope is inside the database scope?

44
00:02:47,483 --> 00:02:49,466
>> Yep. Think rolling stone.

45
00:02:49,483 --> 00:02:50,466
>> Okay.

46
00:02:50,483 --> 00:02:54,466
>> Not so much in the sense of the music, but if I happen to assign

47
00:02:54,483 --> 00:02:57,466
permissions at one scope, generally speaking, and depending on

48
00:02:58,333 --> 00:03:00,466
the permission, those permissions are going to roll downhill...

49
00:03:00,483 --> 00:03:04,316
bless you... roll downhill to the other scopes.

50
00:03:04,483 --> 00:03:08,466
There are some permission specific statements that you'll see.

51
00:03:09,483 --> 00:03:13,466
I like in particular, in one of the courses that I teach, where

52
00:03:13,483 --> 00:03:16,466
it talks about the grant statement and it says something like,

53
00:03:16,483 --> 00:03:20,466
quote: "The grant statement is a very complex statement."

54
00:03:20,483 --> 00:03:23,466
There are a lot of options, but at least the point is obvious.

55
00:03:23,483 --> 00:03:27,466
We're giving access to something.

56
00:03:27,183 --> 00:03:27,466
>> All right.

57
00:03:27,483 --> 00:03:32,466
>> So moving along, one of the first important security decisions

58
00:03:32,483 --> 00:03:35,466
that needs to be made is the authentication mode. As you can

59
00:03:35,483 --> 00:03:40,300
see from the lower right, this decision can be made during installation

60
00:03:40,483 --> 00:03:45,183
and can also be changed after the fact. So it's a little bit

61
00:03:45,266 --> 00:03:50,466
tiny, but you'll see two radial buttons which permits solely

62
00:03:51,483 --> 00:03:56,466
Windows authenticated access to SQL Server. Alternatively, Windows

63
00:03:56,483 --> 00:03:59,400
plus SQL Server log-ins.

64
00:03:59,483 --> 00:04:03,466
>> So basically you can always use your Windows identity log-in,

65
00:04:03,483 --> 00:04:09,400
but SQL Server log-ins have to be specified specifically.

66
00:04:09,483 --> 00:04:12,0
>> Got to throw a switch on, and there's a cost.

67
00:04:12,483 --> 00:04:13,266
>> Uh-oh. What's the cost?

68
00:04:13,350 --> 00:04:15,466
>> The cost is that you're going to have to restart the instance,

69
00:04:15,483 --> 00:04:19,466
restart the database service after you make that change.

70
00:04:19,483 --> 00:04:24,466
>> So anytime you change security, you've got to restart the instance.

71
00:04:24,483 --> 00:04:27,350
>> Well, anytime you change that in particular for sure.

72
00:04:27,433 --> 00:04:28,466
>> The authentication. Okay.

73
00:04:28,483 --> 00:04:32,466
>> Now, for those that have a lot of SQL Servers, consider this.

74
00:04:32,483 --> 00:04:37,466
What actually changes is a registry key, which means then if

75
00:04:37,483 --> 00:04:40,466
you wanted to change the mode universally on a bunch of SQL Servers,

76
00:04:41,483 --> 00:04:44,466
you could actually set up Group Policy to change the registry

77
00:04:44,483 --> 00:04:48,183
key in the policy and apply that to your fleet of SQL Servers,

78
00:04:48,266 --> 00:04:50,466
restart them, and you are good to go.

79
00:04:50,483 --> 00:04:52,466
>> Very cool. Very cool.

80
00:04:52,483 --> 00:04:55,466
>> Now, you'll notice with the Windows identity, that's something

81
00:04:55,183 --> 00:04:59,416
that's already defined in Windows, but if you go back for just

82
00:04:59,483 --> 00:05:02,466
a second, in the upper right we're seeing that we can create

83
00:05:02,483 --> 00:05:07,466
a SQL log-in, which is thumb printed, so to say, to this particular

84
00:05:07,483 --> 00:05:12,466
SQL Server. Quick little side note. Starting with I think this

85
00:05:12,483 --> 00:05:18,466
was SQL 2005, you now can have SQL log-ins pay attention to the

86
00:05:18,483 --> 00:05:24,333
underlying Windows password policy if it's a server operating system.

87
00:05:24,416 --> 00:05:29,466
>> Yep. Yep. You set it in AD and then SQL Server follows along.

88
00:05:29,483 --> 00:05:33,466
>> Yeah. So let's move on to log... pardon me... log-in objects.

89
00:05:33,483 --> 00:05:38,466
And this slide caters to those that might be newer to SQL Server,

90
00:05:38,233 --> 00:05:41,466
and I'm trying to make it very obvious how someone ultimately

91
00:05:41,483 --> 00:05:45,250
gains access to objects within SQL Server.

92
00:05:45,483 --> 00:05:51,183
Think of it as clearing three separate hurdles. First, I have

93
00:05:51,266 --> 00:05:55,166
to knock at the front door and furnish identity of who I am.

94
00:05:55,250 --> 00:05:55,466
>> Okay.

95
00:05:55,483 --> 00:05:59,466
>> And not only do I have to prove who I am, but then I have to

96
00:05:59,483 --> 00:06:01,433
show that I'm invited to the party.

97
00:06:01,450 --> 00:06:01,466
>> Okay.

98
00:06:01,483 --> 00:06:06,466
>> So we refer to this as authentication and authorization.

99
00:06:07,483 --> 00:06:10,466
Now, think about this. If you go in... this is a sort of a private

100
00:06:10,483 --> 00:06:13,466
question, but let's say you go into one of your friends' houses.

101
00:06:13,483 --> 00:06:16,466
Are you're going to wander around and look inside the medicine cabinet?

102
00:06:16,483 --> 00:06:17,466
>> I hope not.

103
00:06:17,483 --> 00:06:20,466
>> No. So similarly, once I get through the front door of the

104
00:06:20,483 --> 00:06:24,466
SQL Server, I may not be able to wander around everywhere in

105
00:06:25,483 --> 00:06:29,333
the instance, and we'll see from the second hurdle, my log-in

106
00:06:29,483 --> 00:06:34,333
object, which is created to permit access into SQL Server, must

107
00:06:34,483 --> 00:06:37,466
then be registered at the database level. To backup for just

108
00:06:37,483 --> 00:06:41,466
a sec, notice that log-ins can be derived from a few different

109
00:06:41,483 --> 00:06:46,283
sources, a Windows account or a SQL Server account, and they

110
00:06:46,366 --> 00:06:48,433
also can involve Windows groups.

111
00:06:48,450 --> 00:06:48,466
>> Okay.

112
00:06:48,483 --> 00:06:51,466
>> Why would you use a group instead of individual accounts?

113
00:06:51,483 --> 00:06:56,433
>> Well, it has to do a little bit with, we'll just say, turf war.

114
00:06:56,483 --> 00:07:00,466
If I want Windows administrators to manage groups, then I could

115
00:07:00,483 --> 00:07:03,466
pass that off and let them populate. But generally it's a measure

116
00:07:03,483 --> 00:07:04,466
of efficiency.

117
00:07:04,483 --> 00:07:05,466
>> Okay.

118
00:07:05,483 --> 00:07:08,466
>> So that's a good point to bring up. Now, at the second hurdle

119
00:07:08,483 --> 00:07:14,466
I have user objects that are then registered at each and every

120
00:07:14,483 --> 00:07:18,266
database where I want to log in to be able to do something.

121
00:07:18,350 --> 00:07:20,466
Similarly, just because I can enter through the front door of

122
00:07:20,483 --> 00:07:23,466
a database, doesn't give me access to everything within that

123
00:07:23,483 --> 00:07:26,466
database, and this brings us to the third hurdle. This will

124
00:07:26,483 --> 00:07:31,200
be what we'll look at towards the end of this module, actually

125
00:07:31,283 --> 00:07:34,466
gaining access to objects within a database. And there are a

126
00:07:34,483 --> 00:07:37,466
few different strategies that you can use for this. Now, when

127
00:07:38,483 --> 00:07:42,466
it comes to the tools that I'll use to build all this, yes, like

128
00:07:42,483 --> 00:07:45,466
a lot of things we've seen. I have the graphical user interface.

129
00:07:45,483 --> 00:07:46,466
>> Absolutely.

130
00:07:46,483 --> 00:07:50,466
>> Like we've seen before, I have code-based methods, create log-in,

131
00:07:50,483 --> 00:07:52,466
alter, drop, et cetera.

132
00:07:52,483 --> 00:07:53,283
>> There you go.

133
00:07:53,366 --> 00:07:57,433
>> And along with these log-in objects, they have configurable options.

134
00:07:57,450 --> 00:07:57,466
>> All right.

135
00:07:57,483 --> 00:08:01,416
>> Not a lot of options, but some. All right. So next up, let's

136
00:08:01,483 --> 00:08:07,466
take a look at administrative capabilities at the instance level.

137
00:08:07,483 --> 00:08:12,466
So we'll refer to these as server-level roles, server-level permissions.

138
00:08:12,483 --> 00:08:15,466
Now, think of being on a cruise ship.

139
00:08:15,483 --> 00:08:16,466
>> Okay.

140
00:08:16,483 --> 00:08:20,466
>> So being on a cruise ship, boy, you would really not want to

141
00:08:20,483 --> 00:08:22,433
fall from one of those cruise ships, because...

142
00:08:22,450 --> 00:08:22,466
>> No....

143
00:08:22,483 --> 00:08:25,466
>> a cruise ship isn't going to be able to stop on a dime.

144
00:08:25,483 --> 00:08:28,466
It's not going to really be able to turn on a dime either.

145
00:08:28,483 --> 00:08:29,466
>> Hope you can swim.

146
00:08:29,483 --> 00:08:32,466
>> So the comparison here is that there are certain things that

147
00:08:32,483 --> 00:08:35,366
have been part of the SQL Server product that have been around

148
00:08:35,450 --> 00:08:37,466
for a long time and they're hard to let go of.

149
00:08:37,483 --> 00:08:38,183
>> Okay.

150
00:08:38,266 --> 00:08:41,466
>> And in particular, I'm referring to server-based roles.

151
00:08:42,0 --> 00:08:46,466
Sometimes they're called fixed server roles, namely, because

152
00:08:47,483 --> 00:08:51,466
I can't change their name, I can't change their permissions.

153
00:08:51,166 --> 00:08:54,466
The one thing I could do is add or remove members.

154
00:08:54,483 --> 00:08:55,466
>> Okay.

155
00:08:55,483 --> 00:08:57,466
>> Drum roll, please. We have some product excitement.

156
00:08:57,483 --> 00:08:59,466
>> Uh-oh, something new?

157
00:08:59,483 --> 00:09:04,466
>> Something new. Now, in SQL 2012, finally, we have the ability

158
00:09:04,483 --> 00:09:08,466
to create our own server-based roles. You'll get to see this

159
00:09:08,483 --> 00:09:09,166
coming up in a moment.

160
00:09:09,250 --> 00:09:11,466
>> Party favors and cheers, please.

161
00:09:11,483 --> 00:09:13,466
>> There you go. All right. Awesome.

162
00:09:13,483 --> 00:09:17,0
>> DBAs have been screaming for that one for a long time.

163
00:09:17,483 --> 00:09:21,466
>> Yeah, namely because often the fixed server roles granted a

164
00:09:21,166 --> 00:09:24,466
whole lot more than you would normally want to for any particular

165
00:09:24,483 --> 00:09:27,466
purpose, so that really made them null and void.

166
00:09:28,483 --> 00:09:33,466
So in order to create both server roles and to be able to assign

167
00:09:33,483 --> 00:09:37,466
more granular server level permissions, we have a few tools that apply.

168
00:09:37,483 --> 00:09:40,466
Any surprises, we have Management Studio.

169
00:09:40,483 --> 00:09:41,466
>> I would hope so.

170
00:09:41,483 --> 00:09:44,466
>> But we also have a system store procedure, if I want to use

171
00:09:44,483 --> 00:09:49,366
code to add a member of a role, and if I want to create a role,

172
00:09:49,450 --> 00:09:51,466
so you see those two code elements there.

173
00:09:51,483 --> 00:09:56,416
>> So would it be safe to say, then, that if you don't want to

174
00:09:56,483 --> 00:10:00,300
assign specific permissions to a user, you use... you create

175
00:10:00,383 --> 00:10:03,466
a user-defined role and assign the permissions?

176
00:10:03,483 --> 00:10:04,466
>> Yeah, good strategy.

177
00:10:05,0 --> 00:10:05,466
>> Awesome.

178
00:10:05,483 --> 00:10:08,466
>> All right. So guys, if you'd cut over to my virtual machine.

179
00:10:08,483 --> 00:10:10,433
>> Let's go take a gander.

180
00:10:10,483 --> 00:10:14,466
>> I'll collapse a few things to tidy up,

181
00:10:16,200 --> 00:10:20,433
and we'll focus at the instance level here. So notice I have

182
00:10:20,483 --> 00:10:25,466
the security node, and under the security node I have server roles.

183
00:10:25,483 --> 00:10:30,466
These would be what we would consider as fixed database roles.

184
00:10:30,483 --> 00:10:33,466
Now, having been with the product for a long time, I recognize

185
00:10:33,483 --> 00:10:39,466
these names. These are all fixed roles. Not a single role is

186
00:10:39,483 --> 00:10:43,200
a nondefault role. These are default roles, so to say.

187
00:10:43,283 --> 00:10:43,466
>> Okay.

188
00:10:43,483 --> 00:10:49,183
>> So with the graphical user interface, I now am able to create

189
00:10:49,266 --> 00:10:57,333
a new server-level role. So let's call this administer log-ins.

190
00:10:58,483 --> 00:10:59,466
>> All right.

191
00:11:01,316 --> 00:11:05,466
>> And now I'm able to grant access to the particular log-ins

192
00:11:05,483 --> 00:11:09,466
that I might want to grant access to, whoever those might be.

193
00:11:09,483 --> 00:11:14,466
So I have one selected. I could grant the control permission,

194
00:11:16,483 --> 00:11:20,466
and of course, I'm able to script out almost any graphical user

195
00:11:20,483 --> 00:11:24,466
interface activity and put all of that in code. So now that

196
00:11:24,483 --> 00:11:28,333
I've created the name of the role, the permissions of the role,

197
00:11:28,483 --> 00:11:31,300
this is where I would determine who the members of the role are,

198
00:11:31,383 --> 00:11:32,466
and now I could add members.

199
00:11:33,400 --> 00:11:38,466
>> Just as an aside, that script button, that is a great way to

200
00:11:38,483 --> 00:11:42,466
record the stuff that you're doing to your database, to your

201
00:11:42,483 --> 00:11:45,466
instance so that when you try and go back and figure it out a

202
00:11:45,483 --> 00:11:48,466
few days later, you can actually remember it.

203
00:11:49,483 --> 00:11:51,466
>> Are you a record-keeping kind of a person?

204
00:11:51,483 --> 00:11:53,183
>> When it comes to databases, I am.

205
00:11:53,266 --> 00:11:54,466
>> Yep. All right.

206
00:11:55,483 --> 00:11:56,466
All righty. So next up,

207
00:12:00,483 --> 00:12:03,466
I'm going to create a couple of log-ins, and

208
00:12:05,483 --> 00:12:09,466
as I'm able to create a log-in with the graphical user interface,

209
00:12:09,483 --> 00:12:12,466
you'll see that I can also create log-ins in code.

210
00:12:13,483 --> 00:12:17,316
And you'll observe from the names here, these are not Windows

211
00:12:17,400 --> 00:12:20,466
naming conventions. A Windows naming convention would require

212
00:12:20,483 --> 00:12:25,383
a machine name or, more likely, a domain name, a backslash, and

213
00:12:25,466 --> 00:12:29,466
then a name, which means that these are SQL log-ins.

214
00:12:30,216 --> 00:12:34,466
>> Okay. And what are those options that you've got set on there,

215
00:12:34,483 --> 00:12:37,383
like default database and check policy?

216
00:12:37,466 --> 00:12:41,466
>> Yeah. So I think I skipped this, pointing this out on a slide before.

217
00:12:41,483 --> 00:12:44,466
I had a little picture of a laser pointer on one of the slides

218
00:12:44,483 --> 00:12:48,466
and skipped stating what the relevance of that was. When a user

219
00:12:48,483 --> 00:12:53,466
successfully connects through the front door of a SQL, they are always...

220
00:12:53,483 --> 00:12:54,466
repeat after me...

221
00:12:54,483 --> 00:12:55,400
>> Always....

222
00:12:55,483 --> 00:13:01,333
>> always pointed at a particular database. So using the default

223
00:13:01,416 --> 00:13:04,466
database option says when someone comes through the front door,

224
00:13:04,483 --> 00:13:09,466
their laser pointer, so to say, is pointed at that particular database.

225
00:13:09,483 --> 00:13:13,466
Now, you can move your laser pointer when the use database statement,

226
00:13:13,483 --> 00:13:18,466
but this sets up a default option. And also, you can determine

227
00:13:18,483 --> 00:13:23,466
whether you want a SQL log into forcefully adhere to a Windows

228
00:13:23,483 --> 00:13:28,466
password policy or not. When you do, that seriously raises the

229
00:13:28,483 --> 00:13:30,466
security and safety of SQL log-ins.

230
00:13:30,483 --> 00:13:34,466
>> So that would be like password expiration and complexity, things

231
00:13:34,483 --> 00:13:35,0
like that?

232
00:13:35,483 --> 00:13:37,466
>> Perfect. I'm glad you brought those up.

233
00:13:37,233 --> 00:13:37,466
>> Awesome.

234
00:13:37,483 --> 00:13:40,466
>> So I can't remember if I ran this or not. Okay. I didn't.

235
00:13:40,483 --> 00:13:44,466
Otherwise I would have had an error, and with the refresh notice,

236
00:13:44,216 --> 00:13:49,400
I have a bunch more... a bunch more objects. So at this point,

237
00:13:50,483 --> 00:13:53,466
I would be able to go to the instance. Let me just look at a

238
00:13:53,483 --> 00:13:57,466
couple of those names. Okay. Bob and Brandi.

239
00:13:58,483 --> 00:13:59,466
Go to properties.

240
00:14:00,483 --> 00:14:02,466
Go to properties of the instance.

241
00:14:03,283 --> 00:14:03,300
>> Okay.

242
00:14:03,383 --> 00:14:04,466
>> Go to permissions.

243
00:14:05,166 --> 00:14:09,466
Now I see the list of log-ins. So let's say Brandi, we want to

244
00:14:09,483 --> 00:14:15,400
grant her, instead of membership in a role, maybe she's a developer

245
00:14:15,483 --> 00:14:19,316
and we want to grant her create any database.

246
00:14:19,483 --> 00:14:25,466
So grant, create any database with Brandi being selected.

247
00:14:25,483 --> 00:14:26,466
>> Awesome.

248
00:14:26,483 --> 00:14:32,466
>> Now, maybe Jane needs more authority than that, and once Jane

249
00:14:32,483 --> 00:14:37,166
is selected, now I assign her a grant control server.

250
00:14:37,483 --> 00:14:40,366
There's a general principle I want to bring out about create

251
00:14:40,450 --> 00:14:45,466
any database, and that is, if I have the ability to create something

252
00:14:45,483 --> 00:14:50,466
and I exercise that privilege, then I own the object I created,

253
00:14:50,483 --> 00:14:52,466
and if I own it, that's supreme.

254
00:14:53,483 --> 00:14:55,266
I have ultimate control over it.

255
00:14:55,350 --> 00:14:55,466
>> Awesome.

256
00:14:55,483 --> 00:15:00,466
>> All right. So that shows how to create a server-based role,

257
00:15:00,483 --> 00:15:03,466
how to create log-ins, and how to assign them privileges.

258
00:15:04,483 --> 00:15:08,466
And now in code, you'll see how I can create a server role in

259
00:15:08,483 --> 00:15:15,466
code, now grant a permission to that particular server-level

260
00:15:15,483 --> 00:15:20,466
role, and now add a member to that role.

261
00:15:21,483 --> 00:15:22,466
>> Neat.

262
00:15:22,483 --> 00:15:25,466
>> I want to give you guys a little phrase here that might help

263
00:15:25,483 --> 00:15:26,466
you out.

264
00:15:28,333 --> 00:15:32,466
Principals are assigned permissions to

265
00:15:34,483 --> 00:15:37,466
securables; a principal being something that can be granted access;

266
00:15:38,400 --> 00:15:42,466
a securable being something that is protectable within the system;

267
00:15:43,483 --> 00:15:45,466
and then a permission ties they will together.

268
00:15:46,483 --> 00:15:50,466
All right. I think that was all that I had for that one.

269
00:15:50,183 --> 00:15:54,466
Just server scope permission. So I also have server scope permissions,

270
00:15:54,483 --> 00:15:58,466
grant control on log-in, grant create any database. So that's

271
00:15:58,483 --> 00:16:00,466
a code-based version of what we saw.

272
00:16:01,166 --> 00:16:01,466
>> Okay.

273
00:16:01,483 --> 00:16:03,466
>> And then a connect permission.

274
00:16:04,250 --> 00:16:08,200
>> So if you've got server-level security set up, does that automatically

275
00:16:08,283 --> 00:16:12,466
give you permissions and abilities to act within a database?

276
00:16:12,483 --> 00:16:17,466
>> No. So what we've just looked at is clearing the first hurdle,

277
00:16:17,483 --> 00:16:21,466
both in the sense of getting into the instance with a log-in

278
00:16:21,483 --> 00:16:24,466
and then having administrative privileges at the instance.

279
00:16:24,483 --> 00:16:28,466
We're now going to echo that, but at the database scope. So we'll

280
00:16:28,483 --> 00:16:31,466
take a look at getting access within a particular database and

281
00:16:31,483 --> 00:16:35,466
then administering a database, as well. So we'll see in this

282
00:16:35,483 --> 00:16:40,466
topic, we'll look at creating database users from log-ins.

283
00:16:40,483 --> 00:16:44,466
We'll take a look at database level roles and a nifty trick,

284
00:16:44,483 --> 00:16:48,466
something you may be familiar with, maybe not, called application roles.

285
00:16:49,483 --> 00:16:51,466
So off to database users.

286
00:16:52,483 --> 00:16:55,466
>> All right. So what is a database user? How do they work?

287
00:16:57,166 --> 00:17:01,166
>> A database user represents the second hurdle of the three hurdles

288
00:17:01,483 --> 00:17:05,216
in my picture, and we see that in order to gain access to a particular

289
00:17:05,300 --> 00:17:11,266
database, my log-in at the instance level needs to be registered

290
00:17:11,350 --> 00:17:14,466
at the database level. I could have an instance with 50 or 100

291
00:17:14,483 --> 00:17:19,466
databases, but I might have only access to one. So whatever

292
00:17:19,483 --> 00:17:23,466
databases I need access to, I'm going to have to have my log-in

293
00:17:23,483 --> 00:17:28,466
registered at the database level in the form of a user object.

294
00:17:28,483 --> 00:17:33,466
Now, I may want to divide the responsibility of administering

295
00:17:33,483 --> 00:17:37,466
a particular database, and in that case, I also have database

296
00:17:37,483 --> 00:17:41,450
level roles. Similar to the instance level, there have always

297
00:17:41,483 --> 00:17:43,466
been fixed database level roles.

298
00:17:45,250 --> 00:17:48,466
Their name... they're called fixed for the same reasons.

299
00:17:48,483 --> 00:17:49,466
>> Okay.

300
00:17:49,483 --> 00:17:51,250
>> Can't change their name.

301
00:17:51,483 --> 00:17:55,433
Can't change their permissions. But I can change membership.

302
00:17:55,450 --> 00:17:55,466
>> All right.

303
00:17:55,483 --> 00:18:01,166
>> Also similar to this server level, in general, they give away

304
00:18:01,483 --> 00:18:05,216
more privileges than I would want to, so we'll often have an

305
00:18:05,300 --> 00:18:08,466
alternate technique for granting administrative privileges.

306
00:18:08,483 --> 00:18:14,466
These... this would be solved in the form of a user-defined database role.

307
00:18:14,483 --> 00:18:20,466
All right. Now, application roles. I explicitly described those

308
00:18:20,483 --> 00:18:23,466
actually in a slide or two, so we'll get to that in a moment.

309
00:18:23,483 --> 00:18:26,466
>> So can we talk a little bit more about those database level

310
00:18:26,483 --> 00:18:27,450
roles, George?

311
00:18:27,483 --> 00:18:31,466
>> Yeah. So you'll see from the screen capture here, I can...

312
00:18:32,450 --> 00:18:32,466
let's see...

313
00:18:36,483 --> 00:18:37,466
I had to see...

314
00:18:38,483 --> 00:18:40,466
get my bearings there. So I selected...

315
00:18:40,483 --> 00:18:41,466
>> It's been a long day.

316
00:18:41,483 --> 00:18:43,466
>> Yeah, been a long day.

317
00:18:44,316 --> 00:18:46,466
In fact, if you guys will cut over to my machine, I think I'd

318
00:18:46,483 --> 00:18:48,383
rather just show this.

319
00:18:49,483 --> 00:18:52,466
So I'm going to navigate to a particular database,

320
00:18:53,483 --> 00:18:59,466
expand the database, go security, and from a confusion standpoint,

321
00:18:59,483 --> 00:19:04,466
notice that I have security at the instance level, but each database

322
00:19:04,483 --> 00:19:08,466
also has its own security node. I think this can be confusing

323
00:19:08,483 --> 00:19:12,283
at times for those that are new to the product. So when I go

324
00:19:12,366 --> 00:19:16,200
to roles, I have database roles, and once again, this represents

325
00:19:16,283 --> 00:19:19,466
my fixed set of database roles.

326
00:19:19,483 --> 00:19:20,466
>> Okay.

327
00:19:20,483 --> 00:19:25,466
>> I also have users defined, and if I want to have a user registered

328
00:19:25,483 --> 00:19:29,466
at this particular database, so that would be the fancy DEB,

329
00:19:29,483 --> 00:19:32,0
when in doubt I'm going to right click, I'm going to choose to

330
00:19:32,483 --> 00:19:36,466
create a new user, and from here I'll define the classification

331
00:19:36,483 --> 00:19:40,466
of user that I want, a SQL user with a log-in... we'll talk

332
00:19:40,483 --> 00:19:43,466
about this shortly... or a Windows user.

333
00:19:43,483 --> 00:19:44,466
>> Okay.

334
00:19:44,483 --> 00:19:45,466
>> Notice the form changes...

335
00:19:46,450 --> 00:19:46,466
>> Yep....

336
00:19:46,483 --> 00:19:49,466
>> based on my choice. If I have a Windows user, I'm going to

337
00:19:49,483 --> 00:19:52,466
obviously have to pick the location of that Windows user and

338
00:19:52,483 --> 00:19:58,466
then either grab a group or I'm going to have to grab

339
00:20:00,483 --> 00:20:03,433
a Windows user.

340
00:20:03,450 --> 00:20:03,466
>> Okay.

341
00:20:06,483 --> 00:20:09,466
>> Or I could grab a SQL log-in, and in this case...

342
00:20:10,450 --> 00:20:13,466
>> You give it a user name, right?

343
00:20:13,483 --> 00:20:16,466
>> I'm going to have to go ahead and pick what particular log-in

344
00:20:16,483 --> 00:20:21,466
it is, and this is where I'll see the laundry list of log-ins

345
00:20:22,333 --> 00:20:22,466
that I made.

346
00:20:24,483 --> 00:20:27,433
I don't know why it picked more than one. So I only wanted to

347
00:20:27,450 --> 00:20:27,466
pick one.

348
00:20:28,483 --> 00:20:32,466
All right. So that's how I would create a database level user.

349
00:20:33,450 --> 00:20:33,466
>> Okay.

350
00:20:33,483 --> 00:20:36,300
>> Except, notice the foil there.

351
00:20:36,383 --> 00:20:38,466
>> You need to have a user name.

352
00:20:38,483 --> 00:20:41,466
>> Yeah. This is... even though this is derived... oops. I lost

353
00:20:41,483 --> 00:20:46,466
my mic there for a sec. Even though this is derived from a Windows

354
00:20:46,483 --> 00:20:50,250
log-in name, strangely, the name doesn't have to match at the

355
00:20:50,333 --> 00:20:51,466
database level.

356
00:20:51,483 --> 00:20:52,466
>> That's a good thing.

357
00:20:52,483 --> 00:20:55,316
>> Yeah, this could be a good thing, because I could have something

358
00:20:55,400 --> 00:20:59,416
like a lengthy or obtuse Windows group name and maybe make a

359
00:20:59,483 --> 00:21:02,466
friendlier name within the database system. But for right now,

360
00:21:02,483 --> 00:21:05,466
I just going to do a quick copy and paste, make that easy.

361
00:21:06,0 --> 00:21:09,466
>> So if it makes sense for traceability and being able to track

362
00:21:09,483 --> 00:21:13,466
back through, it probably makes sense to name the user name and

363
00:21:13,483 --> 00:21:16,466
the log-in the same thing most often.

364
00:21:16,483 --> 00:21:19,466
>> You know, I think so. I'm kind of Captain Straightforward,

365
00:21:19,483 --> 00:21:24,466
and I think, honestly as I age, I like straightforward more and more.

366
00:21:25,450 --> 00:21:25,466
>> All right.

367
00:21:25,483 --> 00:21:29,466
>> All right. Next up, and I'm kind of... I kind of jumped ahead

368
00:21:29,483 --> 00:21:32,466
to our demonstration since it was convenient, but...

369
00:21:32,483 --> 00:21:34,466
>> That's all right. We talk about it while we're doing it.

370
00:21:34,483 --> 00:21:39,166
>> So now going to database roles, notice I can create a new database role.

371
00:21:39,250 --> 00:21:41,466
This particular part of the feature has been around as long as

372
00:21:41,483 --> 00:21:45,466
I've worked with SQL, so at least all the way back to SQL 2000

373
00:21:45,483 --> 00:21:50,466
and probably way before that, as well. So I would identify pools

374
00:21:50,483 --> 00:21:55,466
of people, either administratively or within the database that

375
00:21:55,483 --> 00:21:58,466
needs some access, and I would come up with a name that represents

376
00:21:59,483 --> 00:22:04,466
the kind of access that they need, so something like healthcare

377
00:22:04,233 --> 00:22:05,466
table access.

378
00:22:07,483 --> 00:22:10,466
>> So really what we're talking about is people that serve the

379
00:22:10,483 --> 00:22:13,466
same function rather than have the same identity?

380
00:22:13,483 --> 00:22:18,466
>> Exactly. So after I make a role, that would be one of the legs

381
00:22:18,233 --> 00:22:21,466
of this, I should say after I create a name, then, of course,

382
00:22:21,483 --> 00:22:25,466
I'm going to have to add one or more members. And notice the

383
00:22:25,483 --> 00:22:31,466
members that I can add here fall within these classes, either

384
00:22:31,483 --> 00:22:37,300
users, so log-ins registered at the database level, or strangely,

385
00:22:37,383 --> 00:22:41,466
I can nest a database role within another database role. Be careful

386
00:22:41,483 --> 00:22:46,466
about overengineering that, though. All right. So let's go

387
00:22:46,483 --> 00:22:50,466
ahead and add, even if it's only one person. Now, the final

388
00:22:50,483 --> 00:22:51,466
part of this story...

389
00:22:52,483 --> 00:22:55,466
I can't give this away just yet... is assigning permissions

390
00:22:55,483 --> 00:22:58,466
to the role. That we're going to take a look at a little bit later.

391
00:22:59,450 --> 00:22:59,466
>> All right.

392
00:23:01,483 --> 00:23:05,466
So what about application roles, George? Are user...

393
00:23:06,366 --> 00:23:10,466
are database level roles and application level roles the same thing?

394
00:23:10,216 --> 00:23:13,466
>> No. In fact, let's go ahead and cut back over to my virtual

395
00:23:13,483 --> 00:23:17,466
machine for a second. See, there are some smartypantses out there,

396
00:23:17,483 --> 00:23:21,466
and some of the smartypantses have connected some dots.

397
00:23:21,483 --> 00:23:23,433
They'll say something like...

398
00:23:23,450 --> 00:23:23,466
>> Okay.

399
00:23:23,483 --> 00:23:26,466
>> ...well, hey, I use this application, it connects to a particular

400
00:23:26,483 --> 00:23:30,333
database, maybe somebody gave them some details, they know what

401
00:23:30,416 --> 00:23:33,283
the server name is, maybe they even know some of the objects

402
00:23:33,366 --> 00:23:36,466
they would access, so they could do something like this. In fact,

403
00:23:36,483 --> 00:23:39,450
I don't even remember if I have Office on this machine. But let's

404
00:23:39,483 --> 00:23:40,466
say we did.

405
00:23:40,216 --> 00:23:41,300
>> Hey, we've got one.

406
00:23:41,383 --> 00:23:45,466
>> So now I could go ahead and make a connection directly to a

407
00:23:45,483 --> 00:23:50,466
SQL Server, and if it was based on my Windows or SQL credentials,

408
00:23:50,483 --> 00:23:55,466
I'd be able to make a connection and manipulate objects completely

409
00:23:55,483 --> 00:23:58,466
outside of the applications logic.

410
00:23:58,483 --> 00:24:01,466
>> Wait a minute. Are you trying to say to me that a user who's

411
00:24:01,483 --> 00:24:03,466
got access through an application,

412
00:24:04,483 --> 00:24:08,466
if I create their user name, they can come in some other way

413
00:24:08,483 --> 00:24:11,233
and still get at the data?

414
00:24:11,316 --> 00:24:12,450
>> At the moment.

415
00:24:12,483 --> 00:24:13,433
>> Oh, dear.

416
00:24:13,483 --> 00:24:16,466
>> Yep. So one of two things is true, Rich. That's the way that

417
00:24:16,483 --> 00:24:20,466
I want it, or that's not the way that I want it.

418
00:24:20,483 --> 00:24:22,416
>> So what if I don't want it that way?

419
00:24:22,483 --> 00:24:25,466
>> So if that's not the way that I want it, I actually have a control.

420
00:24:25,483 --> 00:24:27,466
Let me go ahead and get out of this first.

421
00:24:28,483 --> 00:24:32,466
I like to think of Superman when I think of application roles,

422
00:24:32,483 --> 00:24:37,466
and here's why. What you want to picture is someone going through

423
00:24:37,483 --> 00:24:40,433
a telephone booth. Clark Kent, let's say.

424
00:24:40,450 --> 00:24:40,466
>> Okay.

425
00:24:40,483 --> 00:24:45,0
>> He goes through as one identity and comes out as a new identity.

426
00:24:45,483 --> 00:24:48,350
Generally speaking, something with more privileges.

427
00:24:48,433 --> 00:24:48,466
>> Okay.

428
00:24:48,483 --> 00:24:53,466
>> So in that case, I can set up an application role which we'll

429
00:24:53,483 --> 00:25:00,466
observe involves creating a name. Let's call this pharmacy access.

430
00:25:00,483 --> 00:25:01,466
>> Okay.

431
00:25:03,316 --> 00:25:06,466
>> And you'll notice the elements or the building blocks here.

432
00:25:07,183 --> 00:25:08,466
Whoops. Just like...

433
00:25:11,333 --> 00:25:16,466
that's smooth. Okay. Just like with the regular database role,

434
00:25:16,483 --> 00:25:17,433
it has a name.

435
00:25:17,450 --> 00:25:17,466
>> Okay.

436
00:25:17,483 --> 00:25:24,466
>> So da, da, da. And just like a database role, it has securables

437
00:25:24,483 --> 00:25:28,466
or those things that I want to assign permissions to.

438
00:25:28,483 --> 00:25:29,466
>> Okay.

439
00:25:29,483 --> 00:25:35,450
>> What's different is this part. Whoops. This part.

440
00:25:36,283 --> 00:25:38,250
>> All right. That's got a password.

441
00:25:38,333 --> 00:25:43,466
>> Yeah, so notice, this has a password and notice it does not

442
00:25:43,483 --> 00:25:44,466
have members.

443
00:25:45,483 --> 00:25:48,466
>> You know, I was looking at that and I was wondering, how does

444
00:25:48,483 --> 00:25:53,466
somebody use the role if you don't have membership?

445
00:25:53,483 --> 00:25:56,466
>> So let me just put in a dummy password here so that I'm able

446
00:25:56,483 --> 00:25:59,333
to complete the creation of this object.

447
00:25:59,416 --> 00:25:59,466
>> Okay.

448
00:26:00,483 --> 00:26:04,466
>> And that will be the activation password.

449
00:26:04,483 --> 00:26:07,466
So let me go back. If you'd go back to the slides for a moment

450
00:26:07,483 --> 00:26:09,466
there, troopers.

451
00:26:09,483 --> 00:26:10,466
>> All righty.

452
00:26:11,483 --> 00:26:16,466
>> Now, what I need is my front-end application. I'm sorry.

453
00:26:16,483 --> 00:26:20,433
I have to back up. So I'm a human and I open up an application.

454
00:26:20,450 --> 00:26:20,466
>> Okay.

455
00:26:20,483 --> 00:26:23,466
>> I open up a Web URL, I open up a Windows application.

456
00:26:24,183 --> 00:26:27,466
That application is going to have code behind to make a connection

457
00:26:27,483 --> 00:26:28,466
to the database.

458
00:26:28,483 --> 00:26:29,466
>> Okay.

459
00:26:29,183 --> 00:26:33,466
>> From there it will bear my credentials in interacting with

460
00:26:33,483 --> 00:26:37,266
the database, except if I have an application role, I have a

461
00:26:37,350 --> 00:26:41,383
statement that says this connection is going into the telephone

462
00:26:41,466 --> 00:26:46,316
booth and coming out as somebody different, but the end user

463
00:26:46,400 --> 00:26:50,466
does not know that this happened. They neither know the role

464
00:26:50,216 --> 00:26:55,466
name, nor do they know the activation password that I just set up.

465
00:26:55,166 --> 00:26:59,466
>> So SQL's not giving permission or allowing access based on

466
00:26:59,483 --> 00:27:04,466
who they are, but rather, by code telling them what they can do.

467
00:27:04,483 --> 00:27:08,466
>> Exactly. So only based on what their role dictates will they

468
00:27:08,483 --> 00:27:13,466
have access, which means then if smartypants user would now attempt

469
00:27:13,483 --> 00:27:17,466
to use Excel and attempt to make a connection to the database, that...

470
00:27:17,483 --> 00:27:19,433
they wouldn't have any permissions.

471
00:27:19,450 --> 00:27:19,466
>> Okay.

472
00:27:19,483 --> 00:27:22,466
>> Because they would be assigned to the application role.

473
00:27:22,483 --> 00:27:23,366
So there we go.

474
00:27:23,450 --> 00:27:23,466
>> Awesome.

475
00:27:24,166 --> 00:27:27,466
>> All right. That's going to take care of our demo coming up

476
00:27:27,483 --> 00:27:30,466
of us implementing database level security.

477
00:27:30,483 --> 00:27:38,166
>> So the last piece of this, then, is really going to be permissions.

478
00:27:38,483 --> 00:27:43,183
>> Yep. So now we have object permissions... or implementing permissions.

479
00:27:43,266 --> 00:27:47,333
Object permissions, code and module permissions, and we have

480
00:27:47,483 --> 00:27:50,466
to get some to some permission management strategies.

481
00:27:50,483 --> 00:27:53,466
>> Okay. Let's take a look then at

482
00:27:55,483 --> 00:27:56,466
object permissions.

483
00:27:56,483 --> 00:28:02,0
>> All right. So I have a broad class of objects that are contained

484
00:28:02,483 --> 00:28:04,466
within a database. We have tables, views. You see there are

485
00:28:04,483 --> 00:28:08,466
a bunch of other objects there. Object permissions apply to those

486
00:28:08,483 --> 00:28:13,233
particular objects. Now, there's a phrase that I used earlier:

487
00:28:13,483 --> 00:28:14,466
If I have to do something once...

488
00:28:15,483 --> 00:28:17,466
>> I'm probably going to need to do it more than once.

489
00:28:17,483 --> 00:28:20,466
>> ...probably going to have to do it again. So I would tend

490
00:28:20,483 --> 00:28:26,466
to want to avoid giving permissions to single objects, and when

491
00:28:27,483 --> 00:28:31,466
I can leverage a better strategy, meaning if Susie needs access

492
00:28:31,483 --> 00:28:34,466
to table one, then she's probably going to need access to table

493
00:28:34,483 --> 00:28:39,333
two or a broader base of objects. So that means now I'm managing

494
00:28:39,416 --> 00:28:42,333
access on an object-by-object basis.

495
00:28:43,0 --> 00:28:47,466
So the other thing is, Susie may be here today, but she may go,

496
00:28:47,483 --> 00:28:50,466
and that means now I'm going to have to take Patty or Mikey or

497
00:28:50,483 --> 00:28:55,433
somebody else and assign them all the same security that Susie had.

498
00:28:55,450 --> 00:28:55,466
>> Okay.

499
00:28:55,483 --> 00:28:59,466
>> So let's see if there might be a way that we can improve efficiency there.

500
00:29:00,233 --> 00:29:03,466
As far as object permissions are concerned, it depends on the

501
00:29:03,483 --> 00:29:08,183
type of object. So I might need to change the structure of something

502
00:29:08,266 --> 00:29:12,466
like a table, maybe I need to add a column, add a constraint,

503
00:29:13,483 --> 00:29:16,466
so alter permissions might apply. Another possible permission

504
00:29:16,483 --> 00:29:21,466
is broad control where I have, really, unrestricted access to

505
00:29:21,483 --> 00:29:25,466
a particular object. Now, for objects that hold data such as

506
00:29:25,483 --> 00:29:31,466
a table, we have data manipulation language statements that we

507
00:29:31,483 --> 00:29:36,466
can execute, select permission, insert, et cetera. And then

508
00:29:36,483 --> 00:29:39,300
finally, what I call the tattletale permission.

509
00:29:39,383 --> 00:29:40,466
>> The tattletale?

510
00:29:40,483 --> 00:29:44,466
>> I might want someone to be able to look at the code that defined

511
00:29:44,483 --> 00:29:49,466
an object, but not have them change the definition of the object.

512
00:29:49,483 --> 00:29:54,466
It's a minimalist permission, so we have the view definition permission.

513
00:29:54,166 --> 00:29:56,466
>> Awesome. Now, are objects the only things that you can set

514
00:29:57,333 --> 00:29:59,466
permissions on? Are there other things that we're going to need

515
00:29:59,483 --> 00:30:00,383
to deal with?

516
00:30:00,466 --> 00:30:05,466
>> In addition to objects like tables and that, we also have executable

517
00:30:05,483 --> 00:30:10,466
T-SQL code objects such as stored procedures and certain kinds

518
00:30:11,333 --> 00:30:11,466
of functions.

519
00:30:12,450 --> 00:30:12,466
>> Okay.

520
00:30:12,483 --> 00:30:16,466
>> So they also have permissions that apply to them. Some overlap,

521
00:30:16,483 --> 00:30:20,466
but not a perfect overlap. The primary permissions that apply

522
00:30:20,483 --> 00:30:24,466
on a code module would be the execute permission to use it.

523
00:30:24,483 --> 00:30:27,466
So if I wanted to use a stored procedure,

524
00:30:29,483 --> 00:30:33,466
execute it within code, I would need, well, the execute permission.

525
00:30:33,216 --> 00:30:37,466
>> Okay. So how do you set up these permissions? How do you get

526
00:30:37,483 --> 00:30:41,466
them to apply so that you can manage everything?

527
00:30:41,483 --> 00:30:46,466
>> Sure. Consistent within SQL Server we have Management Studio,

528
00:30:46,483 --> 00:30:51,466
and within Management Studio I can start with a principal, that

529
00:30:52,166 --> 00:30:55,466
is, let's say, Mary needs permissions. I can get properties

530
00:30:55,483 --> 00:30:59,466
on Mary and then point her to the particular securable.

531
00:30:59,483 --> 00:31:05,166
Alternately, I can go to the securable and then bring principals

532
00:31:05,483 --> 00:31:09,466
that I want to assign permissions. So it kind of depends on,

533
00:31:09,483 --> 00:31:14,466
well, somewhat preference, but also if I need to assign a principal

534
00:31:15,483 --> 00:31:19,466
to multiple objects, start with a principal. If I have a securable

535
00:31:19,483 --> 00:31:23,466
that needs multiple principal assignments, start with a securable.

536
00:31:23,483 --> 00:31:24,466
>> Okay.

537
00:31:24,483 --> 00:31:27,183
>> So there's no crime either way. You can get the job done.

538
00:31:27,266 --> 00:31:27,466
>> All right.

539
00:31:27,483 --> 00:31:31,466
>> Now, if I want to do it in T-SQL code, I have my normal DCL

540
00:31:32,483 --> 00:31:36,466
statements, data control language statements, grant, revoke,

541
00:31:36,483 --> 00:31:38,466
and deny. Should we talk about those for a minute?

542
00:31:38,483 --> 00:31:40,466
>> Absolutely. I think they're important.

543
00:31:40,483 --> 00:31:44,466
>> All right. So when... I have this nice candy bar. Thanks, Microsoft.

544
00:31:44,183 --> 00:31:47,466
I saw that out in the hallway here. Let's consider this as a

545
00:31:47,483 --> 00:31:51,466
precious resource of some kind, and it is a good one, too.

546
00:31:51,216 --> 00:31:51,466
>> Okay.

547
00:31:51,483 --> 00:31:52,466
>> All right.

548
00:31:53,350 --> 00:31:56,466
Let's consider this is some precious resource that I have.

549
00:31:56,483 --> 00:31:59,466
If I want to extend that to someone else...

550
00:31:59,483 --> 00:32:00,466
>> Thank you.

551
00:32:00,483 --> 00:32:02,466
>> I use the grant statement.

552
00:32:02,483 --> 00:32:05,466
>> If I eat this now, that's going to cause you problems, right?

553
00:32:05,483 --> 00:32:06,466
>> Now, let's say

554
00:32:07,483 --> 00:32:11,466
I had provided something to Rich and I no longer want it to be

555
00:32:11,483 --> 00:32:13,466
that way, I can take it back.

556
00:32:14,483 --> 00:32:16,466
That would be a revoke statement.

557
00:32:17,483 --> 00:32:21,466
There's another circumstance, and that is when... well, Rich,

558
00:32:21,483 --> 00:32:23,433
you're right next to me. I'm going to pick on you.

559
00:32:23,450 --> 00:32:23,466
>> Okay.

560
00:32:23,483 --> 00:32:25,466
>> Let's say you're a member of a role.

561
00:32:26,250 --> 00:32:29,333
So you're a member of a role. Let's say it's the sales role,

562
00:32:29,416 --> 00:32:34,466
and I grant you access to a particular table. I grant the group

563
00:32:34,483 --> 00:32:38,466
access to a table. And maybe that group is granted access to

564
00:32:38,483 --> 00:32:40,450
a number of different tables.

565
00:32:40,483 --> 00:32:41,0
>> Okay.

566
00:32:41,483 --> 00:32:45,466
>> But there's one particular table the group has access to that

567
00:32:45,483 --> 00:32:48,466
they don't want you to have access to.

568
00:32:48,483 --> 00:32:50,266
>> Are you picking on me?

569
00:32:50,350 --> 00:32:54,433
>> Absolutely. And in this case, I'm kind of at a fork in the road.

570
00:32:54,450 --> 00:32:54,466
>> Okay.

571
00:32:54,483 --> 00:32:59,466
>> Neither road will be easy. One road is to create another group

572
00:32:59,483 --> 00:33:02,433
with the same sales members except you.

573
00:33:02,450 --> 00:33:02,466
>> Okay.

574
00:33:02,483 --> 00:33:05,466
>> And that means now I have to manage two separate groups and

575
00:33:05,483 --> 00:33:09,283
remember when to use which one. This is not tidy.

576
00:33:09,366 --> 00:33:09,466
>> All right.

577
00:33:09,483 --> 00:33:15,466
>> Perhaps the path of lesser evil is to keep you in the group,

578
00:33:15,483 --> 00:33:19,400
assign the group permissions to the table the group needs, and

579
00:33:19,483 --> 00:33:23,433
then I explicitly assign you the deny permission.

580
00:33:24,283 --> 00:33:29,466
So that's one way that may reduce my overall effort of administration,

581
00:33:29,483 --> 00:33:32,466
but you have to do that sparingly. It can make your troubleshooting

582
00:33:33,0 --> 00:33:34,466
somewhat more difficult.

583
00:33:34,483 --> 00:33:38,466
>> So you can either let me do it by saying you're granting it

584
00:33:38,483 --> 00:33:43,466
to me, or you can tell me no, you can't do it by denying me.

585
00:33:43,483 --> 00:33:47,466
>> Exactly. And there's one more kind of strangeness. Let's say

586
00:33:47,483 --> 00:33:51,466
that I gave you a negative. I gave you a deny.

587
00:33:51,483 --> 00:33:52,466
>> Okay.

588
00:33:52,483 --> 00:33:57,216
>> I can actually use the revoke statement to remove the negative.

589
00:33:57,483 --> 00:33:58,433
>> Ah.

590
00:33:58,483 --> 00:34:03,466
>> So keep in mind, removing a negative is also performed with

591
00:34:03,483 --> 00:34:04,466
the revoke statement.

592
00:34:04,483 --> 00:34:09,466
>> So grant makes an entry, deny makes an entry, revoke removes

593
00:34:10,166 --> 00:34:10,466
an entry.

594
00:34:10,483 --> 00:34:13,466
>> Good observation, or, you know, good point to make.

595
00:34:13,200 --> 00:34:13,466
>> Nice.

596
00:34:13,483 --> 00:34:18,400
>> And then finally, there is a security anomaly that's been fixed

597
00:34:18,483 --> 00:34:21,466
in SQL 2012. This is...

598
00:34:21,483 --> 00:34:23,466
>> This goes back a long way, too.

599
00:34:23,483 --> 00:34:28,216
>> Goes back a long way. Prior to when I was working with the product.

600
00:34:28,300 --> 00:34:28,433
>> Yep.

601
00:34:28,483 --> 00:34:32,466
>> It's been in there as long as I've known. Namely, I can have

602
00:34:33,333 --> 00:34:39,400
a table level deny and a column level grant that will succeed.

603
00:34:39,483 --> 00:34:42,466
I didn't really talk about column level grants, so you're learning

604
00:34:42,483 --> 00:34:46,466
two things here. First, yes, column level grant has been around

605
00:34:46,483 --> 00:34:50,233
in the product for a while where I grant just certain columns.

606
00:34:50,483 --> 00:34:56,466
But the anomaly of a column level grant overriding a table level

607
00:34:56,483 --> 00:35:00,200
deny no longer exists. Everybody say "ah."

608
00:35:00,283 --> 00:35:00,466
>> Ah.

609
00:35:01,333 --> 00:35:01,466
>> All right.

610
00:35:02,483 --> 00:35:04,466
>> All right. So what about the strategies? How do we apply all

611
00:35:04,483 --> 00:35:07,466
this stuff? What are some approaches we can take?

612
00:35:07,483 --> 00:35:10,466
>> All right. I'm going to take pain somewhere.

613
00:35:11,483 --> 00:35:12,283
>> Usually.

614
00:35:12,366 --> 00:35:16,466
>> So it's just a matter of where I want pain, and normally it's

615
00:35:16,483 --> 00:35:18,466
always better to take pain up front.

616
00:35:19,483 --> 00:35:20,466
>> Okay.

617
00:35:20,483 --> 00:35:22,466
>> And I coined a term here.

618
00:35:23,300 --> 00:35:26,466
I'm going to be famous for this some day. Double abstraction,

619
00:35:26,483 --> 00:35:29,266
and I want to tell you what I mean by this. We're going to review

620
00:35:29,350 --> 00:35:32,466
a couple different ways to implement permissions.

621
00:35:32,483 --> 00:35:36,366
Ultimately, here's my phrase: You want to make sure that you

622
00:35:36,450 --> 00:35:40,466
design so that the design works hard for you rather than make

623
00:35:40,483 --> 00:35:41,466
you work hard.

624
00:35:41,483 --> 00:35:42,466
>> Makes sense.

625
00:35:42,483 --> 00:35:46,166
>> So at the far left here we see that we could have a couple

626
00:35:46,250 --> 00:35:51,433
of database objects and use our database user objects and directly

627
00:35:51,483 --> 00:35:56,333
grant them access to those objects. The thing is maybe one of

628
00:35:56,483 --> 00:36:00,233
those is Bill. Bill might come and go, so now I have to remove

629
00:36:00,316 --> 00:36:03,466
Bill and then I'm going to have to add Susie and grant her access

630
00:36:03,483 --> 00:36:06,433
to all those objects all over again.

631
00:36:06,450 --> 00:36:06,466
>> Okay.

632
00:36:06,483 --> 00:36:09,466
>> Remember, the work stays pretty much the same.

633
00:36:09,483 --> 00:36:10,466
>> Yep.

634
00:36:10,483 --> 00:36:11,466
>> But the worker changes.

635
00:36:11,483 --> 00:36:12,466
>> Yep.

636
00:36:12,483 --> 00:36:15,466
>> So I can improve this a little bit in the next model if I use

637
00:36:15,483 --> 00:36:19,466
something like a Windows group. So at least a Windows group will

638
00:36:19,483 --> 00:36:24,466
have members, although I'm still taking the group and directly

639
00:36:24,183 --> 00:36:28,466
assigning them access to objects. Still maybe not the greatest idea.

640
00:36:28,183 --> 00:36:32,316
>> But the odds of getting rid of a group are probably less than

641
00:36:32,400 --> 00:36:33,466
getting rid of an individual user.

642
00:36:33,483 --> 00:36:36,433
>> Absolutely. So this is definitely an improvement.

643
00:36:36,450 --> 00:36:36,466
>> Okay.

644
00:36:36,483 --> 00:36:41,466
>> Now, even better is using a database or an application role,

645
00:36:41,483 --> 00:36:45,466
and I've used them interchangeably for this particular purpose.

646
00:36:45,483 --> 00:36:49,450
Again, the work is going to stay pretty much the same. The workers

647
00:36:49,483 --> 00:36:54,466
will change. So I can create a semi-fixed relationship of assigning

648
00:36:54,483 --> 00:37:00,333
permissions from a role to one or more objects and then just

649
00:37:00,483 --> 00:37:03,466
manage membership. So this is where you want to aim. You want

650
00:37:03,483 --> 00:37:08,466
to aim for managing membership and not doing all the granular

651
00:37:08,483 --> 00:37:09,466
permission changing.

652
00:37:09,483 --> 00:37:13,466
>> That way you assign the permissions one time, and then you

653
00:37:13,483 --> 00:37:17,466
just add people in and out instead of having to keep changing

654
00:37:17,200 --> 00:37:18,466
the permissions.

655
00:37:18,216 --> 00:37:18,466
>> Exactly.

656
00:37:18,483 --> 00:37:19,466
>> I like that.

657
00:37:19,483 --> 00:37:23,466
>> And in the next model, I raise this just a little bit by using

658
00:37:23,483 --> 00:37:27,466
Windows groups that are added to database roles.

659
00:37:27,200 --> 00:37:27,266
>> Okay.

660
00:37:27,350 --> 00:37:30,466
>> Now, in fact I skipped a little detail. You don't add a Windows

661
00:37:30,483 --> 00:37:34,466
group to a role. You would have a log-in defined from a Windows

662
00:37:34,483 --> 00:37:38,466
group, then that's registered at the user level, which is then

663
00:37:38,483 --> 00:37:42,466
made a member of a database role. Okay. So then...

664
00:37:42,483 --> 00:37:45,433
>> That makes a lot of sense, but what about permissions at the

665
00:37:45,483 --> 00:37:48,166
object level? I mean, is there a way to group things there?

666
00:37:48,250 --> 00:37:52,466
>> In fact, what we see... this is the drum roll, big conclusion.

667
00:37:52,483 --> 00:37:53,466
Thank you very much.

668
00:37:53,483 --> 00:37:54,216
>> Hey.

669
00:37:54,483 --> 00:37:58,466
>> We'll find that all objects are contained within schemas, at

670
00:37:58,483 --> 00:38:03,466
least certain data accessible objects, stored procedures, tables,

671
00:38:03,483 --> 00:38:07,466
views, et cetera. They're contained within a schema. The fancy

672
00:38:07,483 --> 00:38:11,466
part is that we can use schemas to collect objects that need

673
00:38:11,483 --> 00:38:15,466
uniform permissions like a bunch of stored procedures that a

674
00:38:15,483 --> 00:38:17,433
pool of people need to execute.

675
00:38:17,450 --> 00:38:17,466
>> Okay.

676
00:38:17,483 --> 00:38:21,400
>> Or a bunch of tables where people need to select an insert

677
00:38:21,483 --> 00:38:26,466
into, not delete, not update. So I can pool those objects inside

678
00:38:26,483 --> 00:38:31,466
a schema, grant permissions to the schema. Now, in this case,

679
00:38:31,483 --> 00:38:32,466
I get double...

680
00:38:33,483 --> 00:38:36,466
easy for me to say... I get double abstraction.

681
00:38:36,483 --> 00:38:42,266
So on one end, I can add or remove objects to the schema and

682
00:38:42,350 --> 00:38:46,466
not have to assign permissions to them. Because the permission

683
00:38:46,183 --> 00:38:49,466
was assigned to the schema, I don't need to worry about permissions

684
00:38:49,483 --> 00:38:52,466
to the individual object, so I add another stored procedure.

685
00:38:52,483 --> 00:38:57,283
It needs execute. Great. Now, the other end of double abstraction,

686
00:38:57,483 --> 00:39:00,466
instead of having to assign permissions, when I get a new Mikey,

687
00:39:00,483 --> 00:39:04,466
a new Sheila, I just add them as a member of the role. So I

688
00:39:05,0 --> 00:39:08,466
have abstraction on both sides of the permission equation, and

689
00:39:08,483 --> 00:39:10,466
Rich, you're excited about it.

690
00:39:10,483 --> 00:39:15,333
>> I'm absolutely over the top. I can't wait to see it, actually.

691
00:39:15,450 --> 00:39:15,466
>> All right.

692
00:39:15,483 --> 00:39:16,466
>> So how about it?

693
00:39:16,483 --> 00:39:17,466
>> Let's move on to that.

694
00:39:17,483 --> 00:39:19,466
>> All right. Let's go take a look at the demo.

695
00:39:20,483 --> 00:39:24,466
And in this one we're going to be playing with those permissions

696
00:39:24,483 --> 00:39:26,466
that we were just talking about.

697
00:39:26,483 --> 00:39:29,466
>> All right. So let's go ahead and create... let's see. I made

698
00:39:29,483 --> 00:39:30,466
a database role,

699
00:39:32,483 --> 00:39:37,466
and next up let's go ahead and create a schema object.

700
00:39:38,450 --> 00:39:38,466
>> Okay.

701
00:39:38,483 --> 00:39:44,283
>> So let's say I create a new schema. We'll call this manufacturing schema.

702
00:39:44,366 --> 00:39:45,466
>> I like that.

703
00:39:45,483 --> 00:39:46,0
>> Do you?

704
00:39:46,483 --> 00:39:47,466
>> Yeah. It means we're making something.

705
00:39:47,483 --> 00:39:48,466
>> All right.

706
00:39:51,483 --> 00:39:54,466
All right. Now, let's see. I have to look at what database I

707
00:39:54,483 --> 00:39:58,166
was in. So I was in the fancy database. Let me make sure I'm

708
00:39:58,250 --> 00:40:02,466
pointed to the fancy database. And now we'll create just a couple

709
00:40:02,483 --> 00:40:07,466
of objects, create table, and we'll get the schema name,

710
00:40:12,483 --> 00:40:14,466
.t1 for table one.

711
00:40:15,483 --> 00:40:17,466
Just make something sort of silly.

712
00:40:17,483 --> 00:40:18,450
>> Yep.

713
00:40:20,216 --> 00:40:21,183
>> Execute that.

714
00:40:21,266 --> 00:40:21,466
>> Easy table.

715
00:40:21,483 --> 00:40:26,466
>> All right. Next up we'll make another table. Actually, this

716
00:40:26,166 --> 00:40:29,466
time let's create a procedure.

717
00:40:31,483 --> 00:40:32,466
We'll call it p1

718
00:40:34,483 --> 00:40:35,466
for proc one

719
00:40:42,250 --> 00:40:45,466
as select * from

720
00:40:47,483 --> 00:40:51,433
manufacturing .t1.

721
00:40:51,450 --> 00:40:51,466
>> Okay.

722
00:40:54,483 --> 00:40:57,466
>> So we've got a table. We've got a procedure. What's next?

723
00:40:57,483 --> 00:41:01,250
>> We've got a table and we've got a procedure. Okay. So now

724
00:41:01,333 --> 00:41:06,450
using, of course, both the GUI or code, I'm going to take my

725
00:41:06,483 --> 00:41:09,433
role and assign it to the schema.

726
00:41:09,450 --> 00:41:09,466
>> Okay.

727
00:41:09,483 --> 00:41:12,466
>> Which way do you want to start, from the role or the ischemia?

728
00:41:12,483 --> 00:41:13,466
>> Oh, surprise me, George.

729
00:41:13,483 --> 00:41:17,200
>> Okay. So let's start at the schema. I'll go to properties.

730
00:41:20,483 --> 00:41:22,433
We'll go to permissions.

731
00:41:22,483 --> 00:41:23,466
>> Okay.

732
00:41:23,483 --> 00:41:28,466
>> And this is where I will assign a database level principal,

733
00:41:28,483 --> 00:41:29,466
a user or a role.

734
00:41:29,483 --> 00:41:30,416
>> Okay.

735
00:41:30,483 --> 00:41:35,316
>> So on one end we have the abstraction of objects being in the schema.

736
00:41:35,400 --> 00:41:39,466
That's already been set up. But now let's go ahead and pick a role.

737
00:41:39,483 --> 00:41:44,383
So object types. We see database level objects, and now let's

738
00:41:44,466 --> 00:41:48,466
pick the particular one. All right. Pick whatever role we want.

739
00:41:48,483 --> 00:41:51,466
The one we're picking isn't material to the demonstration.

740
00:41:51,483 --> 00:41:52,466
>> All right.

741
00:41:52,483 --> 00:41:55,433
>> Just by virtue of picking a role.

742
00:41:55,450 --> 00:41:55,466
>> Okay.

743
00:41:55,483 --> 00:42:00,466
>> And so now I have the three legs of the permission stool, so

744
00:42:00,483 --> 00:42:07,466
to say. I have the securable. That's the schema object and the

745
00:42:07,483 --> 00:42:13,466
items in it. I have the principal, and now we have to combine

746
00:42:13,483 --> 00:42:16,300
those in here...

747
00:42:16,383 --> 00:42:18,466
sorry... in here

748
00:42:19,483 --> 00:42:27,466
and grant a permission. So let's say we have execute, grant execute

749
00:42:27,483 --> 00:42:34,300
for stored procedures and grant insert and select for tables, S.

750
00:42:34,383 --> 00:42:36,466
Whoops, it comes lower in the alphabet.

751
00:42:39,200 --> 00:42:42,466
>> It has been a long day, hasn't it?

752
00:42:42,483 --> 00:42:43,383
>> All righty.

753
00:42:43,466 --> 00:42:46,466
>> I'm having trouble remembering my alphabet today. Don't worry.

754
00:42:46,483 --> 00:42:49,466
>> There we go. All righty. We have a few minutes left with this session.

755
00:42:49,483 --> 00:42:51,466
Can I take a little bit of liberty here, Alise?

756
00:42:51,483 --> 00:42:55,466
>> Yeah. Go for it.

757
00:42:55,483 --> 00:42:58,466
>> There are a few resources that I want to direct people to,

758
00:42:58,483 --> 00:43:04,466
in particular some websites that have email subscriptions.

759
00:43:04,483 --> 00:43:08,466
They'll send some stuff daily to you in your inbox, so at the

760
00:43:08,483 --> 00:43:12,466
expense of piling up a little bit of mail, I've been immensely

761
00:43:13,333 --> 00:43:18,466
benefited by being a subscriber to some of these. So in some

762
00:43:18,233 --> 00:43:21,466
form of follow-up, we'll make sure we get this... we'll make

763
00:43:22,483 --> 00:43:24,466
sure we get this to you, but to list them by name, here are some

764
00:43:24,483 --> 00:43:27,466
of my favorites. First, MSSQLTips.com.

765
00:43:30,350 --> 00:43:33,466
A great one. So MS SQL tips. There are lots of contributors,

766
00:43:34,333 --> 00:43:40,400
lots of real smartypantses that contribute there. Another one, SQLServerCentral.com.

767
00:43:41,483 --> 00:43:44,466
Pretty parallel sites in terms of what they offer.

768
00:43:45,483 --> 00:43:49,0
Email-based subscriptions, tips, code.

769
00:43:49,483 --> 00:43:50,466
Lots of great stuff.

770
00:43:52,483 --> 00:43:56,466
Another one, these are from... these two are... at least one

771
00:43:56,483 --> 00:43:59,466
is a former Microsoft employee and they live here in Seattle

772
00:43:59,483 --> 00:44:04,466
Metro area, this is Paul S. Randal and Kimberly Trips, their

773
00:44:05,333 --> 00:44:06,466
group, SQLSkills.com.

774
00:44:10,483 --> 00:44:13,466
An interesting thing, Paul Randal is a big book reader and he'll

775
00:44:13,483 --> 00:44:16,216
often tell you what he's reading, and he reads some crazy stuff.

776
00:44:16,300 --> 00:44:19,466
So when I say crazy, I mean a broad variety. That's pretty nifty.

777
00:44:19,483 --> 00:44:21,466
So thanks for putting up the

778
00:44:22,483 --> 00:44:26,466
Web URLs. And then a couple of other things. Rich, would you

779
00:44:26,483 --> 00:44:28,300
add up SQLSaturday.com.

780
00:44:29,483 --> 00:44:33,250
They're are SQL Saturday free one-day training events.

781
00:44:33,333 --> 00:44:35,466
>> If I can spell "Saturday," I'll be happy to.

782
00:44:35,483 --> 00:44:39,300
>> All over the planet, and I've got to put in a little plug for

783
00:44:39,383 --> 00:44:43,466
SQL Saturday Kalamazoo, Michigan coming up in November. You know...

784
00:44:43,483 --> 00:44:45,466
>> That would be that one right there, huh, George?

785
00:44:45,483 --> 00:44:49,466
>> You know what? We'll have people come from Chicago, Ohio, all

786
00:44:49,483 --> 00:44:52,466
over Michigan, and there's some real smartypantses that work

787
00:44:53,483 --> 00:44:55,466
hard and contribute a lot to that event. This will be my third

788
00:44:55,483 --> 00:45:00,466
SQL Saturday Kalamazoo. Maybe my fourth, but really good stuff.

789
00:45:00,483 --> 00:45:04,466
>> And I just want to point out that these are not just events

790
00:45:04,483 --> 00:45:07,466
that are here in the US. As you can see from the listing here,

791
00:45:07,483 --> 00:45:13,433
Lima, Peru, and Kona, Italy, Slovenia. So no matter where you're

792
00:45:13,483 --> 00:45:17,233
viewing this from, check this out because they're may be an event

793
00:45:17,316 --> 00:45:19,466
that's pretty close to you and you can get the benefits from

794
00:45:19,483 --> 00:45:20,466
it as well.

795
00:45:21,166 --> 00:45:23,466
>> Two more, if I can.

796
00:45:23,483 --> 00:45:24,466
>> Uh-oh.

797
00:45:24,483 --> 00:45:27,466
>> You know what? I think we'll save one for the BI one, pragmatic works.

798
00:45:27,483 --> 00:45:28,466
We'll wait on them.

799
00:45:28,483 --> 00:45:29,0
>> Okay.

800
00:45:29,483 --> 00:45:32,466
>> But one more. Go to SQLPASS.org, if you would, please.

801
00:45:33,416 --> 00:45:34,216
>> SQLPASS.org.

802
00:45:34,300 --> 00:45:39,466
>> SQLPASS.org. So this is the laundry list of PASS oriented user

803
00:45:39,483 --> 00:45:43,466
groups all around. Somewhere on there see... you'll find a local chapter.

804
00:45:44,483 --> 00:45:45,466
It's in the upper right.

805
00:45:45,483 --> 00:45:46,416
>> Okay.

806
00:45:46,483 --> 00:45:47,466
>> Or towards the right.

807
00:45:47,483 --> 00:45:50,466
>> There we go. If it were any bigger, it would have hit me.

808
00:45:51,333 --> 00:45:53,466
>> Danny, what state did you grow up?

809
00:45:53,483 --> 00:45:54,466
>> Illinois.

810
00:45:54,483 --> 00:45:58,466
>> Okay. So let's do PASS region, United States.

811
00:45:59,483 --> 00:46:01,383
>> There's Canada, US.

812
00:46:01,466 --> 00:46:04,466
>> US. Let's see. Illinois, so Midwest heartland I think is what

813
00:46:04,483 --> 00:46:05,466
they call it.

814
00:46:05,483 --> 00:46:06,216
>> Okay.

815
00:46:06,300 --> 00:46:08,233
>> Pick one. It doesn't matter and just search.

816
00:46:08,316 --> 00:46:09,300
>> All right.

817
00:46:09,383 --> 00:46:13,466
>> So I can pretty much guarantee if you're anywhere near a major

818
00:46:13,483 --> 00:46:16,466
city, there are going to be some PASS chapters nearby.

819
00:46:16,483 --> 00:46:17,466
>> Awesome. Awesome.

820
00:46:17,483 --> 00:46:21,466
>> I've benefited a lot from being involved. See, in Michigan,

821
00:46:21,483 --> 00:46:25,466
you show where you live by holding up your hand. I'm right smack

822
00:46:25,216 --> 00:46:28,466
dab in mid Michigan, so I'm not from far Grand Rapids, a little

823
00:46:28,483 --> 00:46:31,466
more than an hour. Not far from Detroit. A little more than

824
00:46:31,200 --> 00:46:34,466
an hour. So I'll participate in both user groups, and most recently

825
00:46:34,483 --> 00:46:38,350
I was able to speak in our Detroit user group. A lot of fun there.

826
00:46:38,433 --> 00:46:43,466
>> And again, just want to point out that as with the last website

827
00:46:43,483 --> 00:46:47,283
we showed you, there are lots of international chapters available

828
00:46:47,366 --> 00:46:52,233
as well. I just very quickly pulled up some of the Asia Pacific chapters.

829
00:46:52,316 --> 00:46:56,383
There are others in Latin America, in Europe as well, so, again,

830
00:46:56,466 --> 00:47:00,466
great resource and being able to connect with folks that have

831
00:47:00,483 --> 00:47:04,466
the same interests, the same professional responsibilities can

832
00:47:04,166 --> 00:47:05,466
be invaluable. So...

833
00:47:05,483 --> 00:47:10,466
>> Yep. Good stuff. All righty. So that concludes this particular segment.

834
00:47:10,483 --> 00:47:13,216
One more segment left, and definitely...

835
00:47:13,300 --> 00:47:13,466
>> That would be it....

836
00:47:13,483 --> 00:47:16,466
>> an important and a very interesting segment, something I've

837
00:47:16,483 --> 00:47:20,466
put a lot of time and enthusiasm into, and that's high availability.

838
00:47:20,483 --> 00:47:24,400
So we're going to take a short break and after that...

839
00:47:24,450 --> 00:47:24,466
>> Yes....

840
00:47:24,483 --> 00:47:26,466
>> session six of six.

841
00:47:26,483 --> 00:47:30,466
>> Oh, my goodness. We're coming to the end. Oh, no. I'm disappointed.

842
00:47:31,216 --> 00:47:32,466
See you back here at top of the hour.

